<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sunzhujie.github.io</id>
    <title>阿杰笔记</title>
    <updated>2019-08-15T11:56:21.559Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sunzhujie.github.io"/>
    <link rel="self" href="https://sunzhujie.github.io/atom.xml"/>
    <subtitle>等你等了八万里，如期未至</subtitle>
    <logo>https://sunzhujie.github.io/images/avatar.png</logo>
    <icon>https://sunzhujie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 阿杰笔记</rights>
    <entry>
        <title type="html"><![CDATA[SpringBoot整合Mybtatis-Plus]]></title>
        <id>https://sunzhujie.github.io/post/springboot-zheng-he-mybtatis-plus</id>
        <link href="https://sunzhujie.github.io/post/springboot-zheng-he-mybtatis-plus">
        </link>
        <updated>2019-08-15T11:49:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<h2 id="添加依赖">添加依赖</h2>
<dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus-boot-starter</artifactId>
    <version>3.1.2</version>
</dependency>
## 特性
### 无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑
### 损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作
### 强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求
### 支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错
### 支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题
### 支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作
### 支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）
### 内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用
### 内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询
### 分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库
### 内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询
### 内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作
## 通用Mapper
- 实体类Book.java
```
public class Book {
    //使用TableId注解标记主键对应的属性
    //value：主键的字段名
    //type：主键的生成策略，IdType.AUTO：使用数据库的自增
    @TableId(value = "id",type = IdType.AUTO)
    private Long id;
    private String name;
    private String author;
    private Double price;
    //省略getter和setter
}
```
<ul>
<li>让Mapper接口继承自BaseMapper接口</li>
</ul>
<pre><code class="language-package">
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.oaec.springbootmp.entity.Book;

public interface BookMapper extends BaseMapper&lt;Book&gt; {
}
</code></pre>
<ul>
<li>测试根据编号查询</li>
</ul>
<pre><code class="language-@RunWith(SpringRunner.class)">@SpringBootTest
public class SpringbootMpApplicationTests {

    @Autowired
    private BookMapper bookMapper;

    @Test
    public void contextLoads() {
        Book book = bookMapper.selectById(1001);
        System.out.println(&quot;book = &quot; + book);
    }

}
</code></pre>
<h3 id="增删改">增删改</h3>
<ul>
<li>插入数据</li>
</ul>
<pre><code class="language-Book">book.setName(&quot;红楼梦&quot;);
book.setAuthor(&quot;曹雪芹&quot;);
book.setPrice(19.92);
//返回值代表影响数据库的行数
int insert = bookMapper.insert(book);
System.out.println(&quot;insert = &quot; + insert);
//插入成功之后自动将生成的主键保存在主键对应的属性
System.out.println(&quot;book = &quot; + book);
</code></pre>
<ul>
<li>根据主键更新</li>
</ul>
<pre><code class="language-Book">book.setId(1003L);
//        book.setName(&quot;三国演义&quot;);
book.setAuthor(&quot;罗贯中&quot;);
//根据主键进行数据更新，只会更新赋值的属性，值为null的属性不会进行修改
int i = bookMapper.updateById(book);
System.out.println(&quot;i = &quot; + i);
</code></pre>
<p>自定义条件更新数据</p>
<ul>
<li>Book book = new Book();</li>
</ul>
<pre><code class="language-book.setPrice(10D);">//将价格大于20的书，价格修改为10
//第一个参数的属性会拼接在set之后，第二个参数的条件会拼接在where之后
int update = bookMapper.update(book,
        Wrappers.&lt;Book&gt;lambdaUpdate().gt(Book::getPrice, 20));
System.out.println(&quot;update = &quot; + update);
</code></pre>
<ul>
<li>根据主键删除<br>
<code>bookMapper.deleteById(1161463992506478594L);</code></li>
<li>根据主键批量删除</li>
</ul>
<pre><code class="language-List&lt;Long&gt;">int i = bookMapper.deleteBatchIds(idList);
</code></pre>
<ul>
<li>使用Map作为条件删除</li>
</ul>
<pre><code class="language-Map&lt;String,Object&gt;">map.put(&quot;name&quot;,&quot;西游记&quot;);
int i = bookMapper.deleteByMap(map);
</code></pre>
<ul>
<li>使用条件构造器删除</li>
</ul>
<pre><code>int delete = bookMapper.delete(Wrappers.&lt;Book&gt;lambdaUpdate()
                .lt(Book::getPrice, 20));
</code></pre>
<h3 id="查询">查询</h3>
<ul>
<li>根据主键查询<br>
<code>Book book = bookMapper.selectById(1003)</code></li>
<li>查询全部<br>
<code>List&lt;Book&gt; books = bookMapper.selectList(null);</code></li>
<li>自定义查询条件</li>
</ul>
<pre><code class="language-//查询价格大于10元的书">List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .gt(Book::getPrice, 10));
//查询价格大于10元的书，书名为“三国演义”
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .gt(Book::getPrice, 10)
                .eq(Book::getName, &quot;三国演义&quot;));
//查询书名包含“三”的书
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .like(Book::getName, &quot;三&quot;));
//查询书名以“三”开头的书
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .likeRight(Book::getName, &quot;三&quot;));
</code></pre>
<h3 id="分页查询">分页查询</h3>
<pre><code class="language-配置类：MybatisPlusConfig">/**
 * 配置类
 */
@Configuration
public class MybatisPlusConfig {
    @Bean
    public PaginationInterceptor paginationInterceptor(){
        return new PaginationInterceptor();
    }
}
查询第1页，每页2条
//查询结果为实体类型
IPage&lt;Book&gt; page = bookMapper.selectPage(new Page&lt;Book&gt;(1, 2), null);
//查询结果为Map类型
IPage&lt;Map&lt;String, Object&gt;&gt; page = bookMapper.selectMapsPage(new Page&lt;&gt;(1, 2), null);
IPage接口
List getRecords(); 获取查询记录
long getTotal(); 获取总数量
long getPages() 获取总页数
通用Service
Service接口继承IService
import com.baomidou.mybatisplus.extension.service.IService;
import com.oaec.springbootmp.entity.Book;

public interface BookService extends IService&lt;Book&gt; {
}
Service实现类继承ServiceImpl，实现自己的Service接口
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.oaec.springbootmp.entity.Book;
import com.oaec.springbootmp.mapper.BookMapper;
import com.oaec.springbootmp.service.BookService;
import org.springframework.stereotype.Service;

@Service(&quot;bookService&quot;)
public class BookServiceImpl extends ServiceImpl&lt;BookMapper, Book&gt; implements BookService {
}
</code></pre>
<h2 id="逻辑删除">逻辑删除</h2>
<pre><code class="language-application.yml配置文件中配置代表是否删除的数值">mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 0 # 逻辑已删除值(默认为 0)
      logic-not-delete-value: 1 # 逻辑未删除值(默认为 1)
实体中表示是否删除的属性添加注解
public class Book {
    @TableId(type = IdType.AUTO)
    private Long id;
    private String name;
    private Double price;
    //逻辑删除字段
    @TableLogic
    private Integer status;
    private Timestamp createTime;
    //省略getter和setter
}
执行查询
List&lt;Book&gt; books = bookMapper.selectList(null);
books.forEach(System.out::println);
​	执行的SQL

SELECT id,name,price,status,create_time FROM book WHERE status=1
执行删除
int i = bookMapper.deleteById(1L);
System.out.println(&quot;i = &quot; + i);
​	执行的SQL

UPDATE book SET status=0 WHERE id=? AND status=1
备注
jdk1.8才支持lambda表达式，如果使用jdk1.8之前的版本，可以使用Wrappers.query()
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;query().like(&quot;name&quot;, &quot;三&quot;));
for (Book book : books) {
    System.out.println(&quot;book = &quot; + book);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Mybatis-plus所需要的配置]]></title>
        <id>https://sunzhujie.github.io/post/guan-yu-mybatis-plus-suo-xu-yao-de-pei-zhi</id>
        <link href="https://sunzhujie.github.io/post/guan-yu-mybatis-plus-suo-xu-yao-de-pei-zhi">
        </link>
        <updated>2019-08-15T11:44:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="maven">maven</h2>
<pre><code>&lt;dependency&gt;
            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;3.1.2&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<h2 id="yml">YML</h2>
<pre><code>mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 0 //默认逻辑已删除
      logic-not-delete-value: 1  //默认逻辑未删除
  configuration:
    map-underscore-to-camel-case: true //驼峰命名法
  type-aliases-package: com.oaec.tabledemo.po; //类别名
  mapper-locations: classpath:mapper/*.xml //mapper
</code></pre>
<h2 id="其他yml">其他YML</h2>
<pre><code>spring:
  datasource:
    url: jdbc:mysql://localhost:3306/demo
    driver-class-name: com.mysql.jdbc.Driver
    username: root
    password: 123456
  thymeleaf:
    cache: false
  jackson:
    date-format: yyyy-MM-dd
    time-zone: GMT+8 //时区
mybatis:
  configuration:
    map-underscore-to-camel-case: true
  type-aliases-package: com.oaec.tabledemo.po;
  mapper-locations: classpath:mapper/*.xml
server:
  port: 8888
pagehelper:
  helper-dialect: mysql
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bootstrap-Table的使用]]></title>
        <id>https://sunzhujie.github.io/post/bootstrap-table</id>
        <link href="https://sunzhujie.github.io/post/bootstrap-table">
        </link>
        <updated>2019-08-15T11:34:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="所需要的文件">所需要的文件</h2>
<p><img src="https://sunzhujie.github.io/post-images/1565869358782.png" alt=""></p>
<h2 id="html">HTML</h2>
<pre><code>  &lt;script type=&quot;text/javascript&quot;&gt;
        function del(id){
            alert(id)
        }
        function edit(id){
            alert(id)
        }
        $(function () {
            $(&quot;#booktable&quot;).bootstrapTable({
                url:&quot;/books&quot;,
                method:&quot;get&quot;,
                dataField:&quot;data&quot;,
                pagination:true,//开启分页
                sidePagination:'client', //分页方式
                pageNumber:1, //默认显示第几页
                pageSize:5, //每条页数
                search:true, //开启前端搜索
                strictSearch:false,// 设置为true 搜索模式为完全匹配,不支持模糊查询
                showColumns:true, // 开启列的显示隐藏
                showRefresh: true,
                minimumCountColumns: 2,//最少显示多少列
                uniqueId:&quot;id&quot; ,//每条记录的唯一标识
                columns:[
                    {
                        checkbox:true
                    },
                    {
                        field:&quot;id&quot;,
                        title:&quot;编号&quot;
                    },
                    {
                        field:&quot;name&quot;,
                        title:&quot;书名&quot;
                    },
                    {
                        field:&quot;author&quot;,
                        title:&quot;作者&quot;
                    },
                    {
                        field:&quot;price&quot;,
                        title:&quot;价格&quot;
                    },

                    {
                        field:&quot;status&quot;,
                        title:&quot;状态&quot;,
                        formatter :function (value,row,index) {
                            if(value ===0){
                                return '&lt;span class=&quot;label label-danger&quot;&gt;禁用&lt;/span&gt;';
                            }else if( value ===1){
                                return '&lt;span class=&quot;label label-success&quot;&gt;正常&lt;/span&gt;';
                            }
                        }
                    },
                    {
                        field:&quot;createTime&quot;,
                        title:&quot;时间&quot;
                    },
                    {
                        title:&quot;操作&quot;,
                        formatter :function (value,row,index) {
                            return '&lt;button class=&quot;btn btn-sm btn-primary&quot; onlick=&quot;edit('+row.id+')&quot;&gt;修改&lt;/button&gt;\n'+
                                    '&lt;button class=&quot;btn btn-sm btn-danger&quot; onlick=&quot;del('+row.id+')&quot;&gt;删除&lt;/button&gt; ';
                        }
                    }
                ]
            })
        })

    &lt;/script&gt;
&lt;/head&gt;
&lt;body class=&quot;container&quot;&gt;
        &lt;h1 class=&quot;&quot;&gt;图书列表&lt;/h1&gt;
        &lt;button class=&quot;btn btn-success&quot;&gt;添加图书&lt;/button&gt;
    &lt;table id=&quot;booktable&quot; class=&quot;table table-striped&quot;&gt;&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
</feed>