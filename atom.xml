<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sunzhujie.github.io</id>
    <title>阿杰笔记</title>
    <updated>2019-08-21T01:33:18.354Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sunzhujie.github.io"/>
    <link rel="self" href="https://sunzhujie.github.io/atom.xml"/>
    <subtitle>等你等了八万里，如期未至</subtitle>
    <logo>https://sunzhujie.github.io/images/avatar.png</logo>
    <icon>https://sunzhujie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 阿杰笔记</rights>
    <entry>
        <title type="html"><![CDATA[Redis笔记]]></title>
        <id>https://sunzhujie.github.io/post/redis-bi-ji</id>
        <link href="https://sunzhujie.github.io/post/redis-bi-ji">
        </link>
        <updated>2019-08-21T01:32:28.000Z</updated>
        <content type="html"><![CDATA[<p>window</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux常用命令]]></title>
        <id>https://sunzhujie.github.io/post/linux-chang-yong-ming-li</id>
        <link href="https://sunzhujie.github.io/post/linux-chang-yong-ming-li">
        </link>
        <updated>2019-08-19T01:57:50.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>df -h磁盘使用情况</li>
<li>su tom 切换用户</li>
<li>pwd 当前目录</li>
<li>ls 当前目录下文件目录 ls -l /usr为该命令要操作的对象</li>
<li>cd		回到家目录</li>
<li>cd ~	回到家目录</li>
<li>cd /	回到根目录</li>
<li>cd -	回到上次工作目录</li>
<li>cd .	当前目录</li>
<li>cd . .	回到上一级目录</li>
<li>mkdir创建一个或多个新的空目录，常用选项参数“-p”用于递归创建多层目录<br>
Linux标记<br>
2019-08-16 3 min read<br>
命令<br>
命令格式：命令 参数 目标对象</li>
</ul>
<p>ls -l /ur 以列表的方式查看usr文件下目录文件<br>
cd：切换目录</p>
<p>-cd 回到家目录</p>
<p>-cd~ 回到家目录</p>
<p>-cd / 回到根目录</p>
<p>-cd - 回到上次工作目录</p>
<p>-cd . 当前目录</p>
<p>-cd .. 回到上一级目录</p>
<p>ls：查看当前文件夹下的所有文件夹</p>
<p>ls -h 以单位显示大小<br>
ls -l 列示文件和目录的详细信息，还有一种简介的写法：ll<br>
pwd：查看当前工作目录的完整路径</p>
<p>df：查看当前磁盘使用情况</p>
<p>-h：使用K、M、G为单位显示<br>
-a：显示所有文件系统的磁盘使用情况<br>
-k：以k字节为单位显示<br>
-T： 显示文件系统类型（T必须大写）<br>
无论在哪个文件下输入 df -h等命令，都会显示同样的信息，因为该命令显示的是当前磁盘的使用情况<br>
du：查看当前目录空间使用情况</p>
<p>-h： 使用K、M、G为单位显示<br>
-k：以KB(1024bytes)为单位输出<br>
-m ：以MB为单位输出<br>
-s：仅显示总计，只列出最后加总的值<br>
可以组合使用，比如打开usr文件夹，键入du -hs 或者du -sh 可以查看以GB为单位显示的总计<br>
yum install tree：安装tree</p>
<p>su 用户名 ：切换用户</p>
<p>su root<br>
mkdir ：创建一个或者多个目录，用-p递归创建目录</p>
<p>mkdir demo<br>
mkdir a/b/c -p ：递归创建多级目录 mkdir -p a/b/c 也可以<br>
touch：创建新文件</p>
<p>touch a.log</p>
<blockquote>
<p>： 创建新文件</p>
</blockquote>
<blockquote>
<p>b.log<br>
cp：复制</p>
</blockquote>
<p>a目录下有a.log和b目录，将a.log，复制到b目录中：cd a 然后 cp a.log b<br>
a目录下有a.log和b目录，将a.log，复制到b目录中，并改名为b.log：cd a 然后 cp a.log b/b.log<br>
demo目录下有a目录，a目录下有b目录，b目录下有多个文件，将b目录复制到demo目录下和a目录同级：：cd demo/a 然后 cp b .. 会显示略过目录，因为b目录下还有文件，所以需要递归复制：cp -r b ..<br>
mv：移动</p>
<p>和上面的命令都一样，只不过把cp改成mv<br>
重命名：比如把a目录下的a.log改成ab.log：mv a.log ab.log<br>
删除</p>
<p>删除a目录下的a.log：进入a目录后，rm a.log需要输入y确认才能删除，可以使用 rm -rf a.log来直接删除，不询问<br>
可以直接用多个空格分隔多个文件名，批量删除<br>
查看文件内容</p>
<p>cat 文件名</p>
<p>cat -n显示文件内容时，打印行号</p>
<p>cat –b同上，但排除空行</p>
<p>more 文件名：分屏查看，回车翻页，只能向下翻页，q或者ctrl + c退出</p>
<p>less 文件名：分屏查看，可以向上向下键翻页 ，只有q能退出<br>
head 文件名：前十行</p>
<p>head -n x：显示文件头x行</p>
<p>tail 文件名：后十行</p>
<p>tail -n x：显示文件末尾x行<br>
tail -f ：实时显示文件变化</p>
<p>压缩</p>
<p>zip 压缩文件名 源文件 ：压缩文件<br>
zip a.zip a.log<br>
或者直接写zip a a.log<br>
zip -r 压缩文件名 源目录 ：压缩目录<br>
zip -r a.zip a<br>
unzip 压缩文件名 ：解压缩<br>
unzip a.zip<br>
压缩</p>
<p>tar -zcvf 压缩包名.tar.gz 源文件<br>
选项</p>
<p>z : 压缩为tar.gz</p>
<p>解压缩</p>
<p>tar -zxvf 压缩包名.tar.gz</p>
<p>选项</p>
<p>x: 解压缩.tar.gz格式</p>
<p>压缩多个文件：tar -zcvf test.tar.gz a.log b.log</p>
<p>压缩目录不需要加-r，和压缩文件一样</p>
<p>rpm -qa查看当前系统安装了哪些软件</p>
<p>rpm -qa | grep gcc 查看gcc有没有安装<br>
yum<br>
安装软件<br>
yum install xxx<br>
搜搜<br>
yum search java<br>
vim<br>
操作模式<br>
命令模式<br>
控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p>
<p>插入模式<br>
只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令模式。</p>
<p>底行模式<br>
将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p>
<p>基本命令<br>
vim + 文件名：打开后光标位于文件最后一行<br>
vim +n 文件名：打开后光标位于文件第n行<br>
vim +/xxx 文件名：打开后光标位于xxx所在的行，可以用于快速定位指定内容<br>
vim 文件a 文件b 文件c：打开（创建多个文件），底行模式“n”切换</p>
<p>2</p>
<p>3</p>
<p>Linux<br>
安装Java<br>
yum search java :<br>
yum install java-1.8.0-openjdk ：安装jre<br>
yum install java-1.8.0-openjdk-devel ：安装jdk，直接安装这个也可以，上面的那个会被自动安装<br>
安装的时候加-y参数可以不用输入y安装，直接安装<br>
安装mysql<br>
yum search mariadb<br>
yum install mariadb-server<br>
启动sql：systemctl start mariadb<br>
设置用户名和密码：mysqladmin -u root password zhangjia<br>
允许mysql的root用户远程登录<br>
GRANT ALL PRIVILEGES ON <em>.</em> TO 'root'@'%' IDENTIFIED BY '123456';<br>
GRANT ALL PRIVILEGES ON <em>.</em> TO 'root'@'localhost' IDENTIFIED BY '123456';<br>
FLUSH PRIVILEGES;</p>
<h1 id="其中by后面的密码就是yml文件中配置的密码yml中的密码要随着这个密码而更改还可以直接用mysqladmin来设置这个by后面的密码">其中by后面的密码就是yml文件中配置的密码，yml中的密码要随着这个密码而更改，还可以直接用mysqladmin来设置这个by后面的密码</h1>
<p>安装Tomcat<br>
打开安装目录：cd /usr/local</p>
<p>下载Tomcat：wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz</p>
<p>解压缩安装包：tar -zxvf apache-tomcat-8.5.43.tar.gz</p>
<p>启动Tomcat：进入bin目录，输入./startup.sh启动tomcat</p>
<p>4.1关闭tomcat：<code>./showdown.sh</code><br>
关闭防火墙：systemctl stop firewalld.service</p>
<p>ifconfig查看ip</p>
<p>部署SpringBoot的应用程序<br>
将项目打包<br>
mvn package<br>
导出数据<br>
使用Navicat导出SQL文件<br>
导入数据<br>
使用Navicat导入SQL文件<br>
将打包好的jar文件上传到服务器<br>
使用xftp上传文件<br>
在服务器启动jar文件<br>
java -jar xxx.jar<br>
后台启动：nohup java -jar xxx.jar &amp;<br>
通过进程结束程序<br>
ps -ef | grep java，可以看到进程的id<br>
kill 进程id<br>
自动联网<br>
cd /etc/sysconfig/netword-scripts<br>
vim ifcfg ，将ONBOOT修改为yes<br>
补充<br>
红色：压缩文件<br>
蓝色：目录<br>
linux不是根据扩展名来判断文件类型，但是建议写上<br>
根目录下bin/sib和usr下bin/sbib的区别<br>
根目录下的bin和sbin存放系统本身带的一些命令<br>
usr目下的bin和sbin存放的是一些后来安装的软件命令<br>
root用户的家目录是root，普通用户的家目录是home下的用户名的那个文件夹<br>
任意目录下直接输入cd回车，也可以进入家目录<br>
ctrl + l ：清屏<br>
查找tree命令在哪：which tree</p>
<p>联网：dhclient</p>
<p>重启 init 6</p>
<p>关机 init 0</p>
<p>向上翻页：shift + pg up</p>
<p>向下翻页：shift + pg on</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ajax面试题]]></title>
        <id>https://sunzhujie.github.io/post/ajax-mian-shi-ti</id>
        <link href="https://sunzhujie.github.io/post/ajax-mian-shi-ti">
        </link>
        <updated>2019-08-18T10:33:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是ajaxajax作用是什么">什么是ajax？ajax作用是什么？</h2>
<p>AJAX是“Asynchronous JavaScript and XML”的缩写。他是指一种创建交互式网页应用的网页开发技术。<br>
客户端与服务器，可以在【不必刷新整个浏览器】的情况下，与服务器进行异步通讯的技术</p>
<h2 id="ajax应用和传统web应用有什么不同">AJAX应用和传统Web应用有什么不同？</h2>
<p>传统的web前端与后端的交互中，浏览器直接访问Tomcat的Servlet来获取数据。Servlet通过转发把数据发送给浏览器。<br>
当我们使用AJAX之后，浏览器是先把请求发送到XMLHttpRequest异步对象之中，异步对象对请求进行封装，然后再与发送给服务器。服务器并不是以转发的方式响应，而是以流的方式把数据返回给浏览器<br>
XMLHttpRequest异步对象会不停监听服务器状态的变化，得到服务器返回的数据，就写到浏览器上【因为不是转发的方式，所以是无刷新就能够获取服务器端的数据】</p>
<h2 id="请介绍一下xmlhttprequest对象">请介绍一下XMLhttprequest对象</h2>
<p>Ajax的核心是JavaScript对象XmlHttpRequest。该对象在Internet Explorer 5中首次引入，它是一种支持异步请求的技术。简而言之，XmlHttpRequest使您可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。通XMLHttpRequest对象，Web开发人员可以在页面加载以后进行页面的局部更新</p>
<h2 id="介绍一下xmlhttprequest对象的常用方法和属性方法">介绍一下XMLHttpRequest对象的常用方法和属性方法</h2>
<h3 id="方法">方法</h3>
<p>open()(String method,String url,boolean asynch,String username,String password)<br>
send(content)<br>
setRequestHeader(String header,String value)<br>
getAllResponseHeaders()<br>
getResponseHeader(String header)<br>
abort()</p>
<h3 id="常用的方法就是黑色粗体的前三个">常用的方法就是黑色粗体的前三个</h3>
<h4 id="open该方法创建http请求">open()：该方法创建http请求</h4>
<p>第一个参数是指定提交方式(post、get)<br>
第二个参数是指定要提交的地址是哪<br>
第三个参数是指定是异步还是同步(true表示异步，false表示同步)<br>
第四和第五参数在http认证的时候会用到。是可选的</p>
<h4 id="setrequestheaderstring-headerstring-value设置消息头使用post方式才会使用到get方法并不需要调用该方法">setRequestHeader(String header,String value)：设置消息头（使用post方式才会使用到，get方法并不需要调用该方法）</h4>
<p>xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</p>
<h4 id="sendcontent发送请求给服务器">send(content)：发送请求给服务器</h4>
<p>如果是get方式，并不需要填写参数，或填写null<br>
如果是post方式，把要提交的参数写上去</p>
<h3 id="属性">属性</h3>
<h4 id="onreadystatechange请求状态改变的事件触发器readystate变化时会调用此方法一般用于指定回调函数">onreadystatechange：请求状态改变的事件触发器（readyState变化时会调用此方法），一般用于指定回调函数</h4>
<p>readyState：请求状态readyState一改变，回调函数被调用，它有5个状态<br>
0：未初始化<br>
1：open方法成功调用以后<br>
2：服务器已经应答客户端的请求<br>
3：交互中。Http头信息已经接收，响应数据尚未接收。<br>
4：完成。数据接收完成<br>
responseText：服务器返回的文本内容<br>
responseXML：服务器返回的兼容DOM的XML内容<br>
status：服务器返回的状态码<br>
statusText：服务器返回状态码的文本信息<br>
上面有两个地方都提及了回调函数，回调函数是什么？？<br>
回调函数就是接收服务器返回的内容！</p>
<h2 id="ajax的实现流程是怎样的">Ajax的实现流程是怎样的？</h2>
<p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>
(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>
(3)设置响应HTTP请求状态变化的函数.<br>
(4)发送HTTP请求.<br>
(5)获取异步调用返回的数据.<br>
(6)使用JavaScript和DOM实现局部刷新.</p>
<h2 id="ajax请求总共有多少种callback">AJAX请求总共有多少种CALLBACK</h2>
<p>Ajax请求总共有八种Callback<br>
onSuccess<br>
onFailure<br>
onUninitialized<br>
onLoading<br>
onLoaded<br>
onInteractive<br>
onComplete<br>
onException</p>
<h2 id="ajax有哪些有点和缺点">AJAX有哪些有点和缺点？</h2>
<h3 id="优点">优点：</h3>
<p>1、最大的一点是页面无刷新，用户的体验非常好。<br>
2、使用异步方式与服务器通信，具有更加迅速的响应能力。<br>
3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。<br>
4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</p>
<h3 id="缺点">缺点：</h3>
<p>1、ajax不支持浏览器back按钮。<br>
2、安全问题 AJAX暴露了与服务器交互的细节。<br>
3、对搜索引擎的支持比较弱。<br>
4、破坏了程序的异常机制。<br>
5、不容易调试。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis面试题]]></title>
        <id>https://sunzhujie.github.io/post/redis-mian-shi</id>
        <link href="https://sunzhujie.github.io/post/redis-mian-shi">
        </link>
        <updated>2019-08-18T10:25:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是redis">什么是Redis？</h2>
<p>Redis 是一个使用 C 语言写成的，开源的 key-value 数据库。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。目前，Vmware在资助着redis项目的开发和维护</p>
<h2 id="使用redis有哪些好处">使用redis有哪些好处？</h2>
<p>(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)<br>
(2)支持丰富数据类型，支持string，list，set，sorted set，hash<br>
(3) 支持事务 ：redis对事务是部分支持的，如果是在入队时报错，那么都不会执行；在非入队时报错，那么成功的就会成功执行。详细了解请参考：《Redis事务介绍（四）》：blog.csdn.net/cuipeng0916…<br>
redis监控：锁的介绍<br>
(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Servlet面试题]]></title>
        <id>https://sunzhujie.github.io/post/servlet-mian-shi-ti</id>
        <link href="https://sunzhujie.github.io/post/servlet-mian-shi-ti">
        </link>
        <updated>2019-08-17T11:09:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="servlet是什么">Servlet是什么？</h2>
<p>Servlet是一种服务器端的Java应用程序，具有独立于平台和协议的特性,可以生成动态的Web页面。 它担当客户请求（Web浏览器或其他HTTP客户程序）与服务器响应（HTTP服务器上的数据库或应用程序）的中间层。 　　Servlet是位于Web 服务器内部的服务器端的Java应用程序，与传统的从命令行启动的Java应用程序不同，Servlet由Web服务器进行加载，该Web服务器必须包含支持Servlet的Java虚拟机。<br>
Servlet是用来处理客户端请求并产生动态网页内容的Java类</p>
<h2 id="说一说servlet的生命周期">说一说Servlet的生命周期?</h2>
<p>Servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。 Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法，service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等，当服务器决定将实例销毁的时候调用其destroy方法。<br>
与cgi的区别在于Servlet处于服务器进程中，它通过多线程方式运行其service方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于Servlet。<br>
servlet的生命周期<br>
web容器加载servlet，生命周期开始。通过调用servlet的init()方法进行servlet的初始化。通过调用service()方法实现，根据请求的不同调用不同的do***()方法。结束服务，web容器调用servlet的destroy()方法。</p>
<h2 id="jsp和servlet有哪些相同点和不同点他们之间的联系是什么">JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？</h2>
<p>JSP是Servlet技术的扩展，本质上是Servlet的简易方式，更强调应用的外表表达。JSP编译后是&quot;类servlet&quot;。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。JSP侧重于视图，Servlet主要用于控制逻辑。</p>
<h2 id="四种会话跟踪技术">四种会话跟踪技术</h2>
<p>1）page否是代表与一个页面相关的对象和属性。一个页面由一个编译好的 Java servlet 类（可以带有任何的 include 指令，但是没有 include 动作）表示。这既包括 servlet 又包括被编译成 servlet 的 JSP 页面</p>
<p>2）request是是代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件（由于 forward 指令和 include 动作的关系）</p>
<p>3）session是是代表与用于某个 Web 客户机的一个用户体验相关的对象和属性。一个 Web 会话可以也经常会跨越多个客户机请求</p>
<p>4）application是是代表与整个 Web 应用程序相关的对象和属性。这实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域</p>
<h2 id="request对象的主要方法">Request对象的主要方法</h2>
<p>setAttribute(String name,Object)：设置名字为name的request的参数值<br>
getAttribute(String name)：返回由name指定的属性值<br>
getAttributeNames()：返回request对象所有属性的名字集合，结果是一个枚举的实例<br>
getCookies()：返回客户端的所有Cookie对象，结果是一个Cookie数组<br>
getCharacterEncoding()：返回请求中的字符编码方式<br>
getContentLength()：返回请求的Body的长度<br>
getHeader(String name)：获得HTTP协议定义的文件头信息<br>
getHeaders(String name)：返回指定名字的request Header的所有值，结果是一个枚举的实例<br>
getHeaderNames()：返回所以request Header的名字，结果是一个枚举的实例<br>
getInputStream()：返回请求的输入流，用于获得请求中的数据<br>
getMethod()：获得客户端向服务器端传送数据的方法<br>
getParameter(String name)：获得客户端传送给服务器端的有name指定的参数值<br>
getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例<br>
getParameterValues(String name)：获得有name指定的参数的所有值<br>
getProtocol()：获取客户端向服务器端传送数据所依据的协议名称<br>
getQueryString()：获得查询字符串<br>
getRequestURI()：获取发出请求字符串的客户端地址<br>
getRemoteAddr()：获取客户端的IP地址<br>
getRemoteHost()：获取客户端的名字<br>
getSession([Boolean create])：返回和请求相关Session<br>
getServerName()：获取服务器的名字<br>
getServletPath()：获取客户端所请求的脚本文件的路径<br>
getServerPort()：获取服务器的端口号<br>
removeAttribute(String name)：删除请求中的一个属性</p>
<h2 id="servlet执行时一般实现哪几个方法">Servlet执行时一般实现哪几个方法？</h2>
<p>public void init(ServletConfig config)<br>
public ServletConfig getServletConfig()<br>
public String getServletInfo()<br>
public void service(ServletRequest request,ServletResponse response)<br>
public void destroy()</p>
<h2 id="描述cookie和session的作用区别和各自的应用范围session工作原理">描述Cookie和Session的作用，区别和各自的应用范围，Session工作原理。</h2>
<p>1）cookie 是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。</p>
<p>2）session其实指的就是访问者从到达某个特定主页到离开为止的那段时间。 Session其实是利用Cookie进行信息处理的，当用户首先进行了请求后，服务端就在用户浏览器上创建了一个Cookie，当这个Session结束时，其实就是意味着这个Cookie就过期了。</p>
<p>注：为这个用户创建的Cookie的名称是aspsessionid。这个Cookie的唯一目的就是为每一个用户提供不同的身份认证。</p>
<p>3）cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。</p>
<p>4）cookie 和session的区别是：cookie数据保存在客户端，session数据保存在服务器端。</p>
<p>5）session工作原理：session技术中所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。</p>
<h2 id="隐含对象是什么意思有哪些隐含对象内置对象">隐含对象是什么意思？有哪些隐含对象？内置对象</h2>
<p>JSP隐含对象是页面中的一些Java对象，JSP容器让这些Java对象可以为开发者所使用。开发者不用明确的声明就可以直接使用他们。JSP隐含对象也叫做预定义变量。下面列出了JSP页面中的隐含对象：<br>
内置对象就是不需要声明和创建，直接可以使用的对象<br>
out<br>
可以向浏览器输出内容<br>
request<br>
请求<br>
response<br>
响应<br>
pageContext<br>
当前页面的上下文，可以获取其他的内置对象<br>
session<br>
会话，一般存储用户信息<br>
applicaton<br>
应用程序<br>
page<br>
指的是当前页面，相当于this<br>
config<br>
存储配置信息<br>
exception</p>
<h2 id="异常什么是表达式expression">异常什么是表达式(Expression)？</h2>
<p>JSP表达式是Web服务器把脚本语言表达式的值转化成一个String对象，插入到返回给客户端的数据流中。表达式是在&lt;%=和%&gt;这两个标签之间定义的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot面试题]]></title>
        <id>https://sunzhujie.github.io/post/springboot-mian-shi-ti</id>
        <link href="https://sunzhujie.github.io/post/springboot-mian-shi-ti">
        </link>
        <updated>2019-08-16T13:33:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是-spring-boot">什么是 Spring Boot？</h2>
<p>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。</p>
<h2 id="为什么要用-spring-boot优点">为什么要用 Spring Boot？优点</h2>
<p>独立运行<br>
简化配置<br>
自动配置<br>
无代码生成和XML配置<br>
应用监控<br>
上手容易</p>
<h2 id="spring-boot-的核心配置文件有哪几个它们的区别是什么">Spring Boot 的核心配置文件有哪几个？它们的区别是什么？</h2>
<p>Spring Boot 的核心配置文件是 application 和 bootstrap 配置文件。</p>
<p>application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。</p>
<p>bootstrap 配置文件有以下几个应用场景。</p>
<p>使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；<br>
一些固定的不能被覆盖的属性；<br>
一些加密/解密的场景；</p>
<h2 id="spring-boot-的配置文件有哪几种格式它们有什么区别">Spring Boot 的配置文件有哪几种格式？它们有什么区别？</h2>
<p>.properties 和 .yml，它们的区别主要是书写格式不同。<br>
1).properties<br>
app.user.name = javastack<br>
2).yml<br>
app:<br>
user:<br>
name: javastack<br>
另外，.yml 格式不支持 @PropertySource 注解导入配置。</p>
<h2 id="spring-boot-的核心注解是哪个它主要由哪几个注解组成的">Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h2>
<p>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：<br>
@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。<br>
@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能：<br>
@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。注解来开启 Spring Boot 的各项能力，如自动配置、组件扫描等<br>
@ComponentScan：Spring组件扫描</p>
<h2 id="开启-spring-boot-特性有哪几种方式">开启 Spring Boot 特性有哪几种方式？</h2>
<p>1）继承spring-boot-starter-parent项目<br>
2）导入spring-boot-dependencies项目依赖</p>
<h2 id="spring-boot-需要独立的容器运行吗">Spring Boot 需要独立的容器运行吗？</h2>
<p>可以不需要，内置了 Tomcat/ Jetty 等容器。</p>
<h2 id="运行-spring-boot-有哪几种方式">运行 Spring Boot 有哪几种方式？</h2>
<p>1）打包用命令或者放到容器中运行<br>
2）用 Maven/ Gradle 插件运行<br>
3）直接执行 main 方法运行<br>
Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。</p>
<h2 id="spring-boot-自动配置原理是什么">Spring Boot 自动配置原理是什么？</h2>
<p>注解 @EnableAutoConfiguration, @Configuration, @ConditionalOnClass 就是自动配置的核心，首先它得是一个配置文件，其次根据类路径下是否有这个类去自动配置。</p>
<h2 id="如何在-spring-boot-启动的时候运行一些特定的代码">如何在 Spring Boot 启动的时候运行一些特定的代码？</h2>
<p>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法，具体请看这篇文章</p>
<h2 id="springboot-实现热部署有哪几种方式">SpringBoot 实现热部署有哪几种方式？</h2>
<p>主要有两种方式：<br>
Spring Loaded<br>
Spring-boot-devtools</p>
<h2 id="spring-boot-可以兼容老-spring-项目吗如何做">Spring Boot 可以兼容老 Spring 项目吗，如何做？</h2>
<p>可以兼容，使用 <code>@ImportResource</code> 注解导入老 Spring 项目配置文件。</p>
<h2 id="保护-spring-boot-应用有哪些方法">保护 Spring Boot 应用有哪些方法？</h2>
<p>在生产中使用HTTPS<br>
使用Snyk检查你的依赖关系<br>
升级到最新版本<br>
启用CSRF保护<br>
使用内容安全策略防止XSS攻击</p>
<h2 id="spring-boot-2x-有什么新特性与-1x-有什么区别">Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</h2>
<p>配置变更<br>
JDK 版本升级<br>
第三方类库升级<br>
响应式 Spring 编程支持<br>
HTTP/2 支持<br>
配置属性绑定</p>
<h2 id="你如何理解-spring-boot-配置加载顺序">你如何理解 Spring Boot 配置加载顺序？</h2>
<p>在 Spring Boot 里面，可以使用以下几种方式来加载配置。<br>
1）properties文件；<br>
2）YAML文件；<br>
3）系统环境变量；<br>
4）命令行参数；</p>
<h2 id="spring-boot-支持哪些日志框架推荐和默认的日志框架是哪个">Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</h2>
<p>Spring Boot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架</p>
<h2 id="spring-boot-有哪几种读取配置的方式">Spring Boot 有哪几种读取配置的方式？</h2>
<p>Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationProperties 来绑定变量</p>
<h2 id="如何在-spring-boot-启动的时候运行一些特定的代码-2">如何在 Spring Boot 启动的时候运行一些特定的代码？</h2>
<p>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法，</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringMVC面试题]]></title>
        <id>https://sunzhujie.github.io/post/springmvc-mian-shi-ti</id>
        <link href="https://sunzhujie.github.io/post/springmvc-mian-shi-ti">
        </link>
        <updated>2019-08-16T00:43:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="springmvc工作原理">SpringMVC工作原理</h2>
<p><img src="https://upload-images.jianshu.io/upload_images/4189525-1e95637030237aea.png?imageMogr2/auto-orient/" alt=""><br>
【用户发送请求到前端控制器dispatcherservlet，前端控制器接收到请求之后调用处理器映射器，根据请求url找到具体的处理器，生成处理器对象返回给前端控制器，前端控制器通过处理器适配器调用处理器，执行处理器返回ModelAndView，处理器适配器将ModelAndView返回给前端控制器，前端控制器将ModelAndView传递给视图解析器，视图解析器解析后返回具体的view，前端控制器对view进行渲染视图后响应给用户】<br>
1、用户发送请求至前端控制器DispatcherServlet<br>
2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。<br>
3、处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。【此时处理器映射器返回的处理器对象包含：包名+类名+方法名】<br>
4、DispatcherServlet通过HandlerAdapter处理器适配器调用处理器<br>
5、执行处理器(Controller，也叫后端控制器)。<br>
6、Controller执行完成返回ModelAndView<br>
7、HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet<br>
8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器【ModelAndView内部其实就是一个jsp文件的路径】<br>
9、ViewReslover解析（读取jsp文件到内存中）后返回具体View<br>
10、DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。<br>
11、DispatcherServlet响应用户<br>
12、SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决？<br>
是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Spring的面试题]]></title>
        <id>https://sunzhujie.github.io/post/guan-yu-spring</id>
        <link href="https://sunzhujie.github.io/post/guan-yu-spring">
        </link>
        <updated>2019-08-15T12:06:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是spring">什么是Spring</h2>
<p>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。<br>
POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，</p>
<h2 id="使用spring框架的好处是什么">使用Spring框架的好处是什么？</h2>
<p><strong>轻量</strong>：Spring 是轻量的，基本的版本大约2MB。<br>
<strong>控制反转</strong>：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。<br>
<strong>面向切面的编程(AOP)</strong>：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。<br>
<strong>容器</strong>：Spring 包含并管理应用中对象的生命周期和配置。<br>
MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。<br>
<strong>事务管理</strong>：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。<br>
<strong>异常处理</strong>：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常<br>
<strong>低侵入式设计</strong>，代码的污染极低。<br>
独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once，Run Anywhere的承诺。<br>
Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦。<br>
Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用。<br>
Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问。<br>
Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部。<br>
蓬勃的社区，Spring全家桶，你懂的。</p>
<h2 id="核心容器应用上下文-模块">核心容器（应用上下文) 模块</h2>
<p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。</p>
<h2 id="beanfactory-beanfactory-实现举例">BeanFactory – BeanFactory 实现举例。</h2>
<p>Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从正真的应用代码中分离。<br>
最常用的BeanFactory 实现是XmlBeanFactory 类。</p>
<h2 id="解释aop模块">解释AOP模块</h2>
<p>AOP模块用于发给我们的Spring应用做面向切面的开发， 很多支持由AOP联盟提供，这样就确保了Spring和其他AOP框架的共通性。这个模块将元数据编程引入Spring。</p>
<h2 id="解释jdbc抽象和dao模块">解释JDBC抽象和DAO模块。</h2>
<p>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。</p>
<h2 id="spring配置文件">Spring配置文件</h2>
<p>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</p>
<h2 id="什么是spring-ioc-容器">什么是Spring IOC 容器？</h2>
<p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p>
<h2 id="有哪些不同类型的ioc依赖注入方式">有哪些不同类型的IOC（依赖注入）方式？</h2>
<p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。<br>
Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。<strong>最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</strong></p>
<h2 id="什么是spring-beans">什么是Spring beans?</h2>
<p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中<bean/> 的形式定义。</p>
<h2 id="bean的作用域">Bean的作用域</h2>
<p>当通过Spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下五种作用域：<br>
<strong>Singleton:</strong> 单例模式，在整个Spring容器中，singleton作用域的Bean将只生成一个实例。<br>
<strong>Prototype:</strong> 每次通过容器的getBean()方法获取prototype作用域的Bean时，都将产生一个新的Bean实例。<br>
<strong>Request</strong>: 对于一次HTTP请求，request作用域的Bean将只生成一个实例，这意味着，在同一次HTTP请求内，程序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。<br>
<strong>Session</strong>: 对于一次HTTP会话，session作用域的Bean将只生成一个实例，这意味着，在同一次HTTP会话内，程序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。<br>
<strong>Global session:</strong> 每个全局的HTTP Session对应一个Bean实例。在典型的情况下，仅在使用portlet context的时候有效，同样只在Web应用中有效。<br>
如果不指定Bean的作用域，Spring默认使用Singleton作用域。Prototype作用域的Bean的创建、销毁代价比较大。而Singleton作用域的Bean实例一旦创建成功，就可以重复使用。因此，应该尽量避免将Bean设置成Prototype作用域。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot整合Mybtatis-Plus]]></title>
        <id>https://sunzhujie.github.io/post/springboot-zheng-he-mybtatis-plus</id>
        <link href="https://sunzhujie.github.io/post/springboot-zheng-he-mybtatis-plus">
        </link>
        <updated>2019-08-15T11:49:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<h2 id="添加依赖">添加依赖</h2>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.1.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="特性">特性</h2>
<h3 id="无侵入">无侵入：</h3>
<p>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</p>
<h3 id="损耗小">损耗小：</h3>
<p>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p>
<h3 id="强大的-crud-操作">强大的 CRUD 操作：</h3>
<p>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</p>
<h3 id="支持-lambda-形式调用">支持 Lambda 形式调用：</h3>
<p>通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</p>
<h3 id="支持主键自动生成">支持主键自动生成：</h3>
<p>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</p>
<h3 id="支持-activerecord-模式">支持 ActiveRecord 模式：</h3>
<p>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</p>
<h3 id="支持自定义全局通用操作">支持自定义全局通用操作：</h3>
<p>支持全局通用方法注入（ Write once, use anywhere ）</p>
<h3 id="内置代码生成器">内置代码生成器：</h3>
<p>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</p>
<h3 id="内置分页插件">内置分页插件：</h3>
<p>基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</p>
<h3 id="分页插件支持多种数据库">分页插件支持多种数据库：</h3>
<p>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</p>
<h3 id="内置性能分析插件">内置性能分析插件：</h3>
<p>可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</p>
<h3 id="内置全局拦截插件">内置全局拦截插件：</h3>
<p>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</p>
<h2 id="通用mapper">通用Mapper</h2>
<ul>
<li>实体类Book.java</li>
</ul>
<pre><code>@TableName(&quot;book&quot;) //当数据库表名与实体类不同时
public class Book {
    //使用TableId注解标记主键对应的属性
    //value：主键的字段名
    //type：主键的生成策略，IdType.AUTO：使用数据库的自增
    @TableId(value = &quot;id&quot;,type = IdType.AUTO)
    private Long id;
    private String name;
    private String author;
    private Double price;
		@TableLogic //逻辑删除
		private Integer  status;
		@TableField(exist = false) //当此属性在表中没有时
		priver  String NO;
    //省略getter和setter
}
</code></pre>
<ul>
<li>让Mapper接口继承自BaseMapper接口</li>
</ul>
<pre><code class="language-package">
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.oaec.springbootmp.entity.Book;

public interface BookMapper extends BaseMapper&lt;Book&gt; {
}
</code></pre>
<ul>
<li>测试根据编号查询</li>
</ul>
<pre><code class="language-@RunWith(SpringRunner.class)">@SpringBootTest
public class SpringbootMpApplicationTests {

    @Autowired
    private BookMapper bookMapper;

    @Test
    public void contextLoads() {
        Book book = bookMapper.selectById(1001);
        System.out.println(&quot;book = &quot; + book);
    }

}
</code></pre>
<h3 id="增删改">增删改</h3>
<ul>
<li>插入数据</li>
</ul>
<pre><code>Book book = new Book();
book.setName(&quot;红楼梦&quot;);
book.setAuthor(&quot;曹雪芹&quot;);
book.setPrice(19.92);
//返回值代表影响数据库的行数
int insert = bookMapper.insert(book);
System.out.println(&quot;insert = &quot; + insert);
//插入成功之后自动将生成的主键保存在主键对应的属性
System.out.println(&quot;book = &quot; + book);
</code></pre>
<ul>
<li>根据主键更新</li>
</ul>
<pre><code>Book book = new Book();
book.setId(1003L);
//        book.setName(&quot;三国演义&quot;);
book.setAuthor(&quot;罗贯中&quot;);
//根据主键进行数据更新，只会更新赋值的属性，值为null的属性不会进行修改
int i = bookMapper.updateById(book);
System.out.println(&quot;i = &quot; + i);
</code></pre>
<p>自定义条件更新数据</p>
<ul>
<li>Book book = new Book();</li>
</ul>
<pre><code>book.setPrice(10D);
//将价格大于20的书，价格修改为10
//第一个参数的属性会拼接在set之后，第二个参数的条件会拼接在where之后
int update = bookMapper.update(book,
        Wrappers.&lt;Book&gt;lambdaUpdate().gt(Book::getPrice, 20));
System.out.println(&quot;update = &quot; + update);
</code></pre>
<ul>
<li>根据主键删除<br>
<code>bookMapper.deleteById(1161463992506478594L);</code></li>
<li>根据主键批量删除</li>
</ul>
<pre><code>List&lt;Long&gt; idList = Arrays.asList(1006L, 1007L);
int i = bookMapper.deleteBatchIds(idList);
</code></pre>
<ul>
<li>使用Map作为条件删除</li>
</ul>
<pre><code>Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
map.put(&quot;name&quot;,&quot;西游记&quot;);
int i = bookMapper.deleteByMap(map);
</code></pre>
<ul>
<li>使用条件构造器删除</li>
</ul>
<pre><code>int delete = bookMapper.delete(Wrappers.&lt;Book&gt;lambdaUpdate()
                .lt(Book::getPrice, 20));
</code></pre>
<h3 id="查询">查询</h3>
<ul>
<li>根据主键查询<br>
<code>Book book = bookMapper.selectById(1003)</code></li>
<li>查询全部<br>
<code>List&lt;Book&gt; books = bookMapper.selectList(null);</code></li>
<li>自定义查询条件</li>
</ul>
<pre><code>//查询价格大于10元的书
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .gt(Book::getPrice, 10));
//查询价格大于10元的书，书名为“三国演义”
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .gt(Book::getPrice, 10)
                .eq(Book::getName, &quot;三国演义&quot;));
//查询书名包含“三”的书
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .like(Book::getName, &quot;三&quot;));
//查询书名以“三”开头的书
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;lambdaQuery()
                .likeRight(Book::getName, &quot;三&quot;));
</code></pre>
<h3 id="分页查询">分页查询</h3>
<ul>
<li>配置类：MybatisPlusConfig</li>
</ul>
<pre><code>/**
 * 配置类
 */
@Configuration
public class MybatisPlusConfig {
    @Bean
    public PaginationInterceptor paginationInterceptor(){
        return new PaginationInterceptor();
    }
}
查询第1页，每页2条
//查询结果为实体类型
IPage&lt;Book&gt; page = bookMapper.selectPage(new Page&lt;Book&gt;(1, 2), null);
//查询结果为Map类型
IPage&lt;Map&lt;String, Object&gt;&gt; page = bookMapper.selectMapsPage(new Page&lt;&gt;(1, 2), null);
IPage接口
List getRecords(); 获取查询记录
long getTotal(); 获取总数量
long getPages() 获取总页数
通用Service
Service接口继承IService
import com.baomidou.mybatisplus.extension.service.IService;
import com.oaec.springbootmp.entity.Book;

public interface BookService extends IService&lt;Book&gt; {
}
Service实现类继承ServiceImpl，实现自己的Service接口
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.oaec.springbootmp.entity.Book;
import com.oaec.springbootmp.mapper.BookMapper;
import com.oaec.springbootmp.service.BookService;
import org.springframework.stereotype.Service;

@Service(&quot;bookService&quot;)
public class BookServiceImpl extends ServiceImpl&lt;BookMapper, Book&gt; implements BookService {
}
</code></pre>
<h2 id="逻辑删除">逻辑删除</h2>
<pre><code>application.yml配置文件中配置代表是否删除的数值
mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 0 # 逻辑已删除值(默认为 0)
      logic-not-delete-value: 1 # 逻辑未删除值(默认为 1)
实体中表示是否删除的属性添加注解
public class Book {
    @TableId(type = IdType.AUTO)
    private Long id;
    private String name;
    private Double price;
    //逻辑删除字段
    @TableLogic
    private Integer status;
    private Timestamp createTime;
    //省略getter和setter
}
执行查询
List&lt;Book&gt; books = bookMapper.selectList(null);
books.forEach(System.out::println);
​	执行的SQL

SELECT id,name,price,status,create_time FROM book WHERE status=1
执行删除
int i = bookMapper.deleteById(1L);
System.out.println(&quot;i = &quot; + i);
​	执行的SQL

UPDATE book SET status=0 WHERE id=? AND status=1
备注
jdk1.8才支持lambda表达式，如果使用jdk1.8之前的版本，可以使用Wrappers.query()
List&lt;Book&gt; books = bookMapper.selectList(Wrappers.&lt;Book&gt;query().like(&quot;name&quot;, &quot;三&quot;));
for (Book book : books) {
    System.out.println(&quot;book = &quot; + book);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Mybatis-plus所需要的配置]]></title>
        <id>https://sunzhujie.github.io/post/guan-yu-mybatis-plus-suo-xu-yao-de-pei-zhi</id>
        <link href="https://sunzhujie.github.io/post/guan-yu-mybatis-plus-suo-xu-yao-de-pei-zhi">
        </link>
        <updated>2019-08-15T11:44:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="maven">maven</h2>
<pre><code>&lt;dependency&gt;
            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;3.1.2&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<h2 id="yml">YML</h2>
<pre><code>mybatis-plus:
  global-config:
    db-config:
      logic-delete-value: 0 //默认逻辑已删除
      logic-not-delete-value: 1  //默认逻辑未删除
  configuration:
    map-underscore-to-camel-case: true //驼峰命名法
  type-aliases-package: com.oaec.tabledemo.po; //类别名
  mapper-locations: classpath:mapper/*.xml //mapper
</code></pre>
<h2 id="其他yml">其他YML</h2>
<pre><code>spring:
  datasource:
    url: jdbc:mysql://localhost:3306/demo
    driver-class-name: com.mysql.jdbc.Driver
    username: root
    password: 123456
  thymeleaf:
    cache: false
  jackson:
    date-format: yyyy-MM-dd
    time-zone: GMT+8 //时区
mybatis:
  configuration:
    map-underscore-to-camel-case: true
  type-aliases-package: com.oaec.tabledemo.po;
  mapper-locations: classpath:mapper/*.xml
server:
  port: 8888
pagehelper:
  helper-dialect: mysql
</code></pre>
]]></content>
    </entry>
</feed>